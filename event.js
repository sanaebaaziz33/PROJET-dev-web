const eventSlider = document.getElementById('eventSlider');
const addEventForm = document.getElementById('addEventForm');
const searchInput = document.getElementById('searchInput');
const categoryFilter = document.getElementById('categoryFilter');

let events = [
  {
    title: "JNJD INPT 2025",
    description: "Une comp√©tition de 24h sur le th√®me ....",
    date: "2025-05-20",
    category: "Comp√©tition",
    lieu:"grande amphi_th√©atre de l'INPT",
    image: "images/JNJD.jpeg"
  },
  {
    title: "IDEH INPT 2025",
    description: "Rencontrez les clubs, d√©couvrez les labos et nos projets...",
    date: "2025-01-15",
    category: "Comp√©tition",
    lieu:"grande amphi_th√©atre de l'INPT",
    image: "images/IDEH.jpeg"
  },
  {
    title: "ÿ≤Ÿäÿßÿ±ÿ© ÿßŸÑŸâ ÿØÿßÿ± ÿßŸÑŸÖÿ≥ŸÜŸäŸÜ",
    description: "......üíôŸÑÿ£ŸÜ ÿßŸÑÿπÿ∑ÿßÿ° ŸÑŸäÿ≥ ŸÖÿ¨ÿ±ÿØ ŸÅÿπŸÑÿå ÿ®ŸÑ ÿ¥ÿπŸàÿ± ŸäŸÑÿßŸÖÿ≥ ÿßŸÑŸÇŸÑŸàÿ®",
    date: "2025-04-11",
    category: "Club",
    lieu:"ÿØÿßÿ± ÿßŸÑŸÖÿ≥ŸÜŸäŸÜ ",
    image: "images/visite.jpeg"
  },
  {
    title: "Activit√© de petit ing√©nieur",
    description: "Nos petits ing√©nieurs en herbe ont v√©cu une aventure inoubliable au centre de l‚Äôassociation IBTASSIM Entre robotique, informatique, ateliers cr√©atifs et rires partag√©s, cette journ√©e fut une v√©ritable immersion dans l‚Äôunivers de l‚Äôing√©nierie et de la d√©couverte. üí°ü§ñüé®Un grand merci √† tous les enfants pour leur enthousiasme, √† l‚Äôassociation IBTASSIM pour l‚Äôaccueil chaleureux, √† tous les participants et aux clubs de l‚ÄôINPT CIT Enactus et Comit√© mosqu√©e pour leur engagement sans faille. üíô;",
    date: "2025-05-18",
    category: "Club",
    lieu:"Association ibtassim",
    image: "images/petit ing√©nieur.jpeg"
  }
];

let currentIndex = 0;

// Ajout d'un √©v√©nement
addEventForm.addEventListener('submit', (e) => {
  e.preventDefault();

  const title = document.getElementById('title').value;
  const description = document.getElementById('description').value;
  const date = document.getElementById('date').value;
  const category = document.getElementById('category').value;
  const lieu = document.getElementById('lieu').value;
  const imageFile = document.getElementById('image').files[0];
  

  const reader = new FileReader();
  reader.onload = () => {
    const newEvent = {
      title,
      description,
      date,
      category,
      lieu,
      image: reader.result
    };
    events.push(newEvent);
    currentIndex = 0; 
    renderEvents();
    addEventForm.reset();
  };
  if (imageFile) {
    reader.readAsDataURL(imageFile);
  } else {
    events.push({
      title,
      description,
      date,
      category,
      lieu,
      image: 'images/default.jpeg'
    });
    currentIndex = 0;
    renderEvents();
    addEventForm.reset();
  }
});

// Fonction d‚Äôaffichage dynamique avec filtrage
function renderEvents() {
  eventSlider.innerHTML = '';

  // Filtrage selon recherche et cat√©gorie
  const filtered = events.filter(evt => {
    return evt.title.toLowerCase().includes(searchInput.value.toLowerCase()) &&
           (categoryFilter.value === '' || evt.category === categoryFilter.value);
  });

  // Ajustement de currentIndex si trop grand
  if (currentIndex > filtered.length - 3) {
    currentIndex = Math.max(filtered.length - 3, 0);
  }

  // Prendre jusqu‚Äô√† 3 √©v√©nements √† afficher
  const visibleEvents = filtered.slice(currentIndex, currentIndex + 3);

  visibleEvents.forEach((evt, i) => {
    const card = document.createElement('div');
    card.className = 'event-card';
    card.innerHTML = `
      <img src="${evt.image}" alt="${evt.title}" />
      <div class="event-details">
        <h3>${evt.title}</h3>
        <p>${evt.description.substring(0, 100)}...</p>
        <small>${evt.date} - ${evt.category}</small>
        <div class="card-actions">
          <button class="btn-more" onclick="showMore(${currentIndex + i})">Voir plus</button>
          <button class="btn-edit" onclick="editEvent(${currentIndex + i})">Modifier</button>
          <button class="btn-delete" onclick="deleteEvent(${currentIndex + i})">Supprimer</button>
        </div>
      </div>
    `;
    eventSlider.appendChild(card);
  });

  // Gestion des fl√®ches (d√©sactivation aux bords)
  document.querySelector('.slider-btn.left').disabled = currentIndex === 0;
  document.querySelector('.slider-btn.right').disabled = currentIndex + 3 >= filtered.length;
}

// Fonction de scroll dans les √©v√©nements filtr√©s
function scrollEvents(direction) {
  const filtered = events.filter(evt => {
    return evt.title.toLowerCase().includes(searchInput.value.toLowerCase()) &&
           (categoryFilter.value === '' || evt.category === categoryFilter.value);
  });

  currentIndex += direction * 3;

  if (currentIndex < 0) currentIndex = 0;
  if (currentIndex > filtered.length - 3) currentIndex = Math.max(filtered.length - 3, 0);

  renderEvents();
}

// √âcouteurs de recherche et filtre
searchInput.addEventListener('input', () => {
  currentIndex = 0;
  renderEvents();
});

categoryFilter.addEventListener('change', () => {
  currentIndex = 0;
  renderEvents();
});

// Fonction pour afficher le d√©tail dans modal
function showMore(index) {
  const evt = events[index];
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.innerHTML = `
    <div class="modal-content">
      <span class="close-btn" onclick="this.parentElement.parentElement.remove()">&times;</span>
      <h2>${evt.title}</h2>
      <img src="${evt.image}" alt="Event Full" />
      <p><strong>Date:</strong> ${evt.date}</p>
      <p><strong>Cat√©gorie:</strong> ${evt.category}</p>
      <p><strong>lieu:</strong>${evt.lieu}</p>
      <p>${evt.description}</p>
    </div>
  `;
  document.body.appendChild(modal);
}

// Placeholder pour modifier un √©v√©nement (√† impl√©menter si souhait√©)
function editEvent(index) {
  alert("Fonction modification non encore impl√©ment√©e !");
}

// Supprimer un √©v√©nement
function deleteEvent(index) {
  if (confirm("Voulez-vous vraiment supprimer cet √©v√©nement ?")) {
    events.splice(index, 1);
    if (currentIndex > events.length - 3) {
      currentIndex = Math.max(events.length - 3, 0);
    }
    renderEvents();
  }
}

// D√©filement automatique toutes les 5 secondes
setInterval(() => {
  scrollEvents(1);
}, 5000);

// Affichage initial
renderEvents();


document.getElementById('eventForm').addEventListener('submit', async function (e) {
  e.preventDefault();

  const user = JSON.parse(localStorage.getItem("user"));
  if (!user) {
    alert("Connexion requise pour publier un √©v√©nement.");
    return;
  }

  const data = {
    title: document.getElementById('title').value,
    description: document.getElementById('description').value,
    date: document.getElementById('date').value,
    time: document.getElementById('time').value,
    location: document.getElementById('location').value,
    user_id: user.id
  };

  const res = await fetch('/events', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  });

  const result = await res.json();
  if (result.success) {
    alert("√âv√©nement ajout√© avec succ√®s !");
    // Optionnel : reload ou vider le formulaire
  } else {
    alert(result.message || "Erreur");
  }
});
